module.exports = function(grunt) {
    'use strict';

    var path = require('path'),
        Handlebars = require('handlebars');

    function bundler(src, dest, glob) {
        var matches = [];

        src = path.resolve(src);
        dest = path.resolve(dest);

        grunt.file.expand({cwd: src}, glob).forEach(function(relpath) {
            var extname = path.extname(relpath),
                dirname = path.dirname(relpath),
                basename = path.basename(relpath, extname),
                k = path.join(dirname, basename);

            // don't include the destination
            if (path.resolve(src, relpath) !== dest) {
                matches.push({
                    src: relpath,
                    basename: basename,
                    dirname: dirname,
                    extname: extname,
                    relpath: path.join(dirname, basename)
                });
            }
        });

        // add some convenience props
        if (matches.length) {
            matches[0].isFirst = true;
            matches[matches.length-1].isLast = true;
        }

        return matches;
    }

    // alias to generate a bundle of compiled templates via the "handlebars:build" task
    grunt.registerTask('bundle:templates', [
        'handlebars:build'
    ]);

    // custom task to generate a bundled view module
    grunt.registerTask('bundle:views', 'Generates a bundled view module', function() {
        var src = 'src/js/views',
            dest = path.resolve('src/bundles/views.js'),
            glob = '**/*.js',
            matches = bundler(src, dest, glob, 'src/js'),
            output;

        output = Handlebars.compile([
            '// DO NOT EDIT! This file is automatically generated by running: grunt bundle:views',
            'require([\n{{#each this}}\'views/{{relpath}}\'{{#unless isLast}},{{/unless}}\n{{/each}}]);'
        ].join('\n'))(matches);

        grunt.file.write(dest, output);
    });

    // run all bundle sub-tasks
    grunt.registerTask('bundle', [
        'bundle:templates',
        'bundle:views'
    ]);

};
